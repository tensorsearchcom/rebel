from typing import List, Optional, Dict

from rebel.models import (
    TestSuite,
    Message,
    ParameterGrid,
    AssistantOutput,
    TestGroup
)


test_suites: List[TestSuite] = []
"""A global registry that stores all TestSuite objects generated by the @test_case decorator."""


def test_case(
    messages: List[Message],
    tags: Optional[List[str]] = [],
    expected_output: Optional[AssistantOutput] = AssistantOutput(),
    api_params: Optional[Dict] = {},
    param_grid: Optional[ParameterGrid] = ParameterGrid(parameters={}),
):
    """A decorator to define and register benchmark test cases.

    This decorator wraps a generator function that yields `TestGroup` objects. It
    combines the decorator's parameters with each yielded group to create and
    register one or more `TestSuite` objects.

    Args:
        messages (List[Message]): The core list of messages forming the input prompt.
        tags (Optional[List[str]]): A list of tags to apply to all test suites
            generated from this function. Defaults to an empty list.
        expected_output (Optional[AssistantOutput]): The ground truth or expected
            output for the test cases. Defaults to an empty AssistantOutput.
        api_params (Optional[Dict]): A dictionary of default API parameters for
            all test suites. Defaults to an empty dictionary.
        param_grid (Optional[ParameterGrid]): A grid of parameters to expand the
            test cases into multiple variations. Defaults to an empty grid.

    Returns:
        Callable: The original decorated function, after registering the test suites.
    """
    def decorator(func):
        """The inner wrapper that processes the decorated function."""
        name = func.__name__
        
        # The decorated function is a generator that yields TestGroup objects
        groups = list(func())
        
        # Create and register a TestSuite for each yielded TestGroup
        test_suites.extend([
            TestSuite(
                name=f"{name}_{group.postfix}" if group.postfix else name,
                messages=messages,
                tags=tags + group.tags,
                api_params=api_params,
                parameter_grid=param_grid,
                expected_output=expected_output,
                retry_params=group.retry_params,
                metrics=group.metrics
            ) for group in groups
        ])
        
        return func
        
    return decorator
